---
resource_types:
  - name: keyval
    type: docker-image
    source:
      repository: swce/keyval-resource

resources:

  - name: mongodb-bosh-release
    type: git
    source:
      uri:    ((repositories.mongodb.uri))
      branch: ((repositories.mongodb.branch))

  - name: mongodb-version
    type: semver
    source: 
      initial_version: 1.0.0
      driver: git
      uri: https://github.com/orange-cloudfoundry/mongodb-boshrelease.git
      branch: ((repositories.mongodb.branch))
      file: mongodb_version
      username: ((repositories.mongodb.username))
      password: ((repositories.mongodb.password))
      git_user: "((repositories.mongodb.git_user)) <((repositories.mongodb.email))>"

  - name: OK
    type: keyval

  - &cf-integration-lock
    name: cf-integration-lock
    type: pool
    source:
      uri: ((repositories.locks-pool.uri))
      branch: ((repositories.locks-pool.branch))
      pool: bosh
      username: ((repositories.locks-pool.username))
      password: ((repositories.locks-pool.password))

  - &cf-broker-smoke-tests-lock
    <<: *cf-integration-lock
    name: cf-broker-smoke-tests-lock    

jobs:
- &create_release
  name: create-release
  plan:

    - &release-lock
      put: cf-integration-lock
      params: {claim: cf-integration}

    - &prepare-release
      do:
      - get: mongodb-bosh-release
      #  trigger: true
      - aggregate:
        - get: mongodb-version
    #      trigger: true
        - &create-bosh-config
          task: create-bosh-config
          file: mongodb-bosh-release/ci/tasks/create-bosh-config.yml
          params:
            CA_CERT:  ((bosh-server.ca))
            IP:       ((bosh-server.ip))
            ALIAS:    ((bosh-server.alias)) 
            USER:     ((bosh-server.user))
            PASSWORD: ((bosh-server.password))

      - &init-keyval-ressource
        task: init-keyval-ressource
        file: mongodb-bosh-release/ci/tasks/init-keyval-resource.yml

      - put: OK
        params: {file: output/keyval.properties}        

      - &get-config-files
        task: get-config-files
        file: mongodb-bosh-release/ci/tasks/get-config-files.yml
        params: &get-config-files-params
          USE_RELEASE_CONFIG: ((blobstores.release.use_release_config))
          ACCESS_KEY_ID:      ((blobstores.release.access_key_id))
          SECRET_ACCESS_KEY:  ((blobstores.release.secret_access_key))
          ENDPOINT_URL:       ((blobstores.release.endpoint-url))
          BUCKET:             ((blobstores.release.bucket))
          SIGNATURE_VERSION:  ((blobstores.release.signature-version))
          SKIP_SSL:           ((blobstores.release.skip-ssl-validation))
          SSL_CERT:           ((blobstores.release.certificate))
          GOLANG_VERSION:     ((deployment.golang-version))
          CONFIG_PATH:        ((blobstores.release.config_path))

      - task: create-release
        file: mongodb-bosh-release/ci/tasks/create-release.yml
        attempts: 1
        params: &deploy-parameters
          ALIAS:                ((bosh-server.alias))
          RELEASE_NAME:         ((deployment.name))
          DEPLOYMENT_NAME:      ((deployment.name))
          DEPLOYMENT_NETWORK:   ((deployment.network))
          PERSISTENT_DISK_TYPE: ((deployment.mongodb.persistent-disk-type))
        on_failure: &cf-integration-unlock
          put: cf-integration-lock
          params: {release: cf-integration} 


- &deploy-replicaset
  name: deploy-replicaset
  plan:
    - get: OK
      passed: [ create-release ]
      trigger: true

    - &deployment-lock
      put: cf-broker-smoke-tests-lock
      params: {claim: cf-broker-smoke-tests}

    - &deployment-config
      do:
        - get: mongodb-bosh-release
        - aggregate: 
          - get: mongodb-version
          - <<: *create-bosh-config
      
    - &deployment
      task: deploy-replicaset
      file: mongodb-bosh-release/ci/tasks/deployment.yml
      attempts: 1
      params: &deploy-parameters
        MANIFEST:             manifest-rs.yml
        OPSFILES:             |
                              enable-mongodb-broker.yml 
                              enable-mongodb-broker-route-registrar.yml 
                              enable-mongodb-broker-smoke-tests.yml
        ALIAS:                ((bosh-server.alias))
        RELEASE_NAME:         ((deployment.name))
        DEPLOYMENT_NAME:      ((deployment.name))
        DEPLOYMENT_NETWORK:   ((deployment.network))
        PERSISTENT_DISK_TYPE: ((deployment.mongodb.persistent-disk-type))
        VM_TYPE:              ((deployment.mongodb.vm-type))        
        MONGO_PORT:           ((deployment.mongodb.port))
        ROOT_USERNAME:        ((deployment.mongodb.root-username))
        NB_INSTANCES:         ((deployment.mongodb.nb_instances))
        ENGINE:               "wiredtiger"
        BROKER_VM_TYPE:       ((deployment.broker.vm_type))
        BROKER_PERSISTENT_DISK_TYPE: ((deployment.broker.persistent_disk_type))
        BROKER_CATALOG_YML:   ((deployment.broker.catalog_yml))
        # for ssl deployment not fully implemented YET
        #REQUIRE_SSL:          ((deployment.mongodb.require_ssl))
        #CA_NAME:              ((deployment.mongodb.ca_name))
        # for cloudfoundry deployment
        CF_NATS_HOST:         ((cf.nats_host))
        CF_NATS_PASSWORD:     ((cf.nats_password))
        CF_SYSTEM_DOMAIN:     ((cf.system_domain))
        CF_ADMIN_PASSWORD:    ((cf.admin_password))
        CF_ORG:               ((cf.org))
        CF_SPACE:             ((cf.space))
      on_failure: &deployment-unlock
        put: cf-broker-smoke-tests-lock
        params: {release: cf-broker-smoke-tests-lock} 


- &create-service-broker
  name: create-service-broker
  plan:
    - get: OK
      passed: [ deploy-replicaset ]
      trigger: true

    - &create-service-broker-plan
      do:
        - get: mongodb-bosh-release

        - task: get-broker-password
          file: mongodb-bosh-release/ci/tasks/get-broker-password.yml
          params:
            BOSH_ALIAS:       ((bosh-server.alias))
            IP:               ((credhub.ip))
            PORT:             ((credhub.port))
            USER:             ((credhub.username))
            PASSWORD:         ((credhub.password))
            DEPLOYMENT_NAME:  ((deployment.name))
            UAA_CA:           ((uaa.ca))
            CREDHUB_CA:       ((credhub.ca))

        - task: create-service-broker
          file: mongodb-bosh-release/ci/tasks/create-service-broker.yml
          params:
            CF_API_URL:           https://api.((cf.system_domain))
            CF_ADMIN_PASSWORD:    ((cf.admin_password))
            SKIP_SSL:             ((cf.skip_ssl_validation))

- &run-smoke-tests
  name: run-smoke-tests
  plan:
    - get: OK
      passed: [ create-service-broker ]
      trigger: true
    - &run-smoke-tests-plan
      do:  
        - get: mongodb-bosh-release      
        - <<: *create-bosh-config
        - task: run-smoke-tests
          file: mongodb-bosh-release/ci/tasks/run-smoke-tests.yml
          params:
            ALIAS:                ((bosh-server.alias))
            DEPLOYMENT_NAME:      ((deployment.name))

- &remove-deployment
  name: remove-deployment
  plan:
    - get: OK
      passed: [ run-smoke-tests ]
      trigger: true
    - &remove-deployment-plan
      do:  
        - get: cf-broker-smoke-tests-lock
        - get: mongodb-bosh-release
        - <<: *create-bosh-config
        - task: remove-cf-components
          file: mongodb-bosh-release/ci/tasks/remove-cf-components.yml
          params:
            CF_API_URL:           https://api.((cf.system_domain))
            CF_ADMIN_PASSWORD:    ((cf.admin_password))
            SKIP_SSL:             ((cf.skip_ssl_validation))

        - task: remove-deployment-rs
          attempts: 3
          file: mongodb-bosh-release/ci/tasks/remove-deployment.yml      
          params: &remove-deployment-params
            ALIAS:                ((bosh-server.alias))
            DEPLOYMENT_NAME:      ((deployment.name))
        - task: credhub-cleanup
          file: mongodb-bosh-release/ci/tasks/credhub-cleanup.yml    
          params: 
            BOSH_ALIAS:       ((bosh-server.alias))
            IP:               ((credhub.ip))
            PORT:             ((credhub.port))
            USER:             ((credhub.username))
            PASSWORD:         ((credhub.password))
            UAA_CA:           ((uaa.ca))
            CREDHUB_CA:       ((credhub.ca))
            DEPLOYMENT_NAME:  ((deployment.name))

        - <<: *deployment-unlock

- <<: *deploy-replicaset
  name: deploy-shard
  plan:
    - get: OK
      passed: [ create-release ]
      trigger: true    
    - <<: *deployment-lock
    - <<: *deployment-config
    - <<: *deployment
      task: deploy-shard
      params:
        <<: *deploy-parameters
        MANIFEST:             manifest-shard.yml
        OPSFILES:             |
                              enable-mongodb-broker.yml 
                              use-broker-shard-links.yml  
                              enable-mongodb-broker-route-registrar.yml 
                              enable-mongodb-broker-smoke-tests.yml
- <<: *create-service-broker
  name: create-service-broker-shard
  plan:
    - get: OK
      passed: [ deploy-shard ]
      trigger: true
    - <<: *create-service-broker-plan  

- <<: *run-smoke-tests
  name: run-smoke-tests-shard
  plan:
    - get: OK
      passed: [ create-service-broker-shard ]
      trigger: true
    - <<: *run-smoke-tests-plan

- <<: *remove-deployment
  name: remove-deployment-shard
  plan:
    - get: OK
      passed: [ run-smoke-tests-shard ]
      trigger: true
    - <<: *remove-deployment-plan


- name: remove-release
  plan:
    - get: OK
      passed: [ remove-deployment-shard,remove-deployment ]
      trigger: true
    - get: cf-integration-lock
    - get: mongodb-bosh-release
    - <<: *create-bosh-config
    - task: delete-release
      file: mongodb-bosh-release/ci/tasks/delete-release.yml      
      params: 
        ALIAS:                ((bosh-server.alias))
        RELEASE_NAME:         ((deployment.name))
    - <<: *cf-integration-unlock    
 
