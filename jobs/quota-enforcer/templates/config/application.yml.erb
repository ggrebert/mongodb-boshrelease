---
server.port: 8081
spring.application.name: mongodb-quotaenforcer
mongodb:
  host: <% nodes = link('server') %><% nodes.instances.each do |instance| %><%= instance.address %>,<% end %>
  username: <%= link('server').p('root_username') %>
  password: <%= link('server').p('root_password') %>

<%-
  require "shellwords"

  def esc(x)
    Shellwords.shellescape(x)
  end

  _mongos_config = ''
  link('server').instances.each do |instance|
    _mongos_config = "#{_mongos_config}#{instance.address},"
  end
  # remove last ,
  mongos_config = _mongos_config[0..-2]
%>
spring.data.mongodb.uri: mongodb://<%= link('server').p('root_username') %>:<%= link('server').p('root_password') %>@<%= esc(mongos_config) %>:27017/?replicaSet=rs0&authSource=admin

logging.level.org.mongodb.driver.connection: INFO
logging.level.org.mongodb.driver.cluster: ERROR
logging.level.org.springframework.security: DEBUG
#logging.level.orange.acdc.mongodb.quotaenforcer.controllers: DEBUG

server.tomcat.remote-ip-header: x-forwarded-for
server.tomcat.protocol-header: x-forwarded-proto

quota-enforcer.plansize: <%= p('quota_enforcer.plansize') %>
quota-enforcer.ignoreUsers:  <%= p('quota_enforcer.ignoreUsers') %>
security.basic.enabled: false
security.oauth2.client.clientId: <%= p('cf.clientId') %>
security.oauth2.client.clientSecret: <%= p('cf.clientSecret') %>
security.oauth2.client.accessTokenUri: <%= p('cf.accessTokenUri') %>
security.oauth2.client.userAuthorizationUri: <%= p('cf.userAuthorizationUri') %>
security.oauth2.resource.userInfoUri: <%= p('cf.userInfoUri') %>
#server.ssl.key-store: classpath:quota-enforcer-keystore.p12
#server.ssl.key-store-password: quota-enforcer
#server.ssl.keyStoreType: PKCS12
#server.ssl.keyAlias: quota-enforcer
