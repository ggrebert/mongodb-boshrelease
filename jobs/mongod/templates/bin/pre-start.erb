#!/bin/bash
set -eux
#set -x

source `dirname $(readlink --canonicalize-existing $0)`/setenv

<%-
if p("mongodb.node_role") == "rs" || p("mongodb.node_role") == "sa"
  mongo_DbTypeport = p("mongodb.rs_port")
  _mongo_rsconfig = ''
  link('server').instances.each do |instance|
    _mongo_rsconfig = "#{_mongo_rsconfig}#{instance.address}:#{mongo_DbTypeport},"
  end
  # remove last ,
  mongo_rsconfig = _mongo_rsconfig[0..-2]
  mongo_current_ip = spec.ip
end
if p("mongodb.require_ssl") == 0 -%>
export MONGO_CMD="/var/vcap/jobs/${JOB_NAME}/bin/mongo.sh"
<%- else -%>
# Generate the certificates
/var/vcap/jobs/${JOB_NAME}/bin/generate_ssl_cert.sh
export MONGO_CMD="/var/vcap/jobs/${JOB_NAME}/bin/mongo-ssl.sh"
<%- end -%>

get_actual_members()
{
  m_list=""
  for i in `${MONGO_CMD} --host rs0/<%= mongo_current_ip %>  ${MONGO_CMD_PARAM} --eval 'rs.status().members' \
      | grep name | tr -s [:space:] | tr -d '"' | cut -d ":" -f2`
  do
    m_list="$m_list $i"
  done
  echo $m_list
}

start_bs()
{
  # Stopping eventually running instance
  if [ -f $PIDFILE ]
    then
    [ `ps -p $(cat $PIDFILE)|wc -l` -gt 1 ] && kill_and_wait $PIDFILE
  fi

  pid_guard $PIDFILE ${JOB_NAME}

  # start mongod without auth
  su -m vcap -c "$MONGODB_BIN/mongod --config $MONGODB_CONF/mongod_bootstrap.conf --pidfilepath $PIDFILE"
}

sys_update()
{
  # creating needed directories
  for dir in $RUN_DIR $LOG_DIR $TMP_DIR $STORE_DIR $DATA_DIR
  do
    mkdir -p ${dir}
    chown vcap:vcap ${dir}
    chmod 775 ${dir}
  done

  # updating vcap limits
  if [ -f /etc/security/limits.conf ]
  then
    if [ `grep "$(cat $JOB_DIR/config/vcap_limits.conf)" /etc/security/limits.conf|wc -l` -eq 0 ]
    then
      cat $JOB_DIR/config/vcap_limits.conf >> /etc/security/limits.conf
    fi
  # Allow limits apply without rebooting
    if [ -f /etc/pam.d/common-session ]
    then
      if [ `grep "^session required pam_limits.so" /etc/pam.d/common-session|wc -l` -eq 0 ]
      then
        echo "# Allow limits apply without rebooting" >> /etc/pam.d/common-session
        echo "session required pam_limits.so" >> /etc/pam.d/common-session
      fi
    fi
  fi

  # disabeling transparent_hugepage
  if [ -d /sys/kernel/mm/transparent_hugepage ]; then
        thp_path=/sys/kernel/mm/transparent_hugepage
  elif [ -d /sys/kernel/mm/redhat_transparent_hugepage ]; then
        thp_path=/sys/kernel/mm/redhat_transparent_hugepage
  else
        return 0
  fi

  echo 'never' > ${thp_path}/enabled
  echo 'never' > ${thp_path}/defrag
  unset thp_path
}

check_master()
{
  # looking for already created master node
  Master=""
  for Server in $(echo <%= mongo_rsconfig -%>|tr -s "," " ")
  do

    if [ "`${MONGO_CMD} --host $Server \
        ${MONGO_CMD_PARAM} --eval 'db.isMaster().ismaster' 2>/dev/null`" == "true" ]
    then
      Master=$Server
    else
      if [ "`${MONGO_CMD} --host $Server -u '<%= p("mongodb.root_username") %>' \
          -p '<%= p("mongodb.root_password") %>' --authenticationDatabase admin \
          ${MONGO_CMD_PARAM} --eval 'db.isMaster().ismaster' 2>/dev/null`" == "true" ]
      then
        Master=$Server
      fi
    fi
  done
  echo $Master
}

remove_unwanted_nodes()
{
  export MONGO_CMD_PARAM="${MONGO_CMD_PARAM} \
    -u <%= p("mongodb.root_username") %> -p <%= p("mongodb.root_password") %> --authenticationDatabase admin"

  wanted_servers=$(echo <%= mongo_rsconfig -%>|tr -s "," " ")
  for defined_server in $( get_actual_members )
  do
    if [ `echo $wanted_servers| grep $defined_server|wc -l` -eq 0 ]
    then
      ${MONGO_CMD} --host <%= p("mongodb.replication.replica_set_name") %>/$Master \
        ${MONGO_CMD_PARAM} --eval 'rs.remove("'$defined_server':<%= mongo_DbTypeport %>")'
    fi
  done
}

create_admin_users()
{
     # check if admin users have already been created
    CR=1
    while [ $CR -ne 0 ]
    do
      created=`${MONGO_CMD} ${MONGO_CMD_PARAM} --host <%= mongo_current_ip %> \
        --eval 'db.getUser("<%= p("mongodb.admin_username") %>")' admin`
      CR=$?
      [ $CR -eq 0 -a "$created" == "null" ] && CR=1
      if [ $CR -eq 0 ]
      then
        created=`${MONGO_CMD} ${MONGO_CMD_PARAM} --host <%= mongo_current_ip %> \
          --eval 'db.getUser("<%= p("mongodb.root_username") %>")' admin`
        CR=$?
        [ $CR -eq 0 -a "$created" == "null" ] && CR=1
      fi
      # Create admin users if not already created
      if [ $CR -ne 0 ]
      then
         ${MONGO_CMD} ${MONGO_CMD_PARAM} --host <%= mongo_current_ip %> < /var/vcap/jobs/${JOB_NAME}/js/create_admin_user.js
      fi
    done
}

init_rs()
{
    CR=1
    while [ $CR -ne 0 ]
    do
      ${MONGO_CMD} --host <%= mongo_current_ip %> \
        ${MONGO_CMD_PARAM} < /var/vcap/jobs/${JOB_NAME}/js/initiate_rs.js
      CR=$?
    done
    # wait until rs is fully active
    # while [ `${MONGO_CMD} --host <%= mongo_current_ip %> ${MONGO_CMD_PARAM} --eval 'rs.status().ok'` -ne 1 -o \
    # $(${MONGO_CMD} --host <%= mongo_current_ip %> ${MONGO_CMD_PARAM} --eval 'rs.status().members'| \
    # grep "\"infoMessage\" : \"could not find member to sync from\""|wc -l) -gt 0 ]
    while [ `${MONGO_CMD} --host <%= mongo_current_ip %> ${MONGO_CMD_PARAM} --eval 'rs.status().ok'` -ne 1 ]
    do
      sleep 3
    done
}

# nodes initialisation in replicaset mode
start_replicaset()
{
Master=$( check_master )
if [ "$Master" == "" -o "$Master" == "<%= mongo_current_ip %>" ]
then
  [ "$Master" == "" ] && start_bs || remove_unwanted_nodes
  # check if rs is already initialized
  if [ "$(${MONGO_CMD} --host <%= mongo_current_ip %> ${MONGO_CMD_PARAM} \
      --eval 'rs.status().codeName' 2>/dev/null)" == "NotYetInitialized" ]
  then
    init_rs
    create_admin_users
  fi
else
  start_bs
  export MONGO_CMD_PARAM="${MONGO_CMD_PARAM} -u <%= p("mongodb.root_username") %> -p <%= p("mongodb.root_password") %> --authenticationDatabase admin"
  # check Master node if admin users have already been created
  admin_initialized=`${MONGO_CMD} --host $Master ${MONGO_CMD_PARAM} \
    --eval 'db.getUser("<%= p("mongodb.admin_username") %>")' admin`
  CR=$?
  [ $CR -eq 0 -a "$admin_initialized" == "null" ] && CR=1
  if [ $CR -eq 0 ]
  then
    admin_initialized=`${MONGO_CMD} --host $Master  ${MONGO_CMD_PARAM} \
      --eval 'db.getUser("<%= p("mongodb.root_username") %>")' admin`
    CR=$?
    [ $CR -eq 0 -a "$admin_initialized" == "null" ] && CR=1
  fi

  if [ $CR -eq 0 ]
  then
    # restarting with auth
    kill_and_wait $PIDFILE
    pid_guard $PIDFILE ${JOB_NAME}
    su -m vcap -c "$MONGODB_BIN/mongod --config $MONGODB_CONF/mongod.conf --pidfilepath $PIDFILE"
  else
    exit 1
  fi

  # Adding current node to rs
  ${MONGO_CMD} --host <%= p("mongodb.replication.replica_set_name") %>/$Master \
    ${MONGO_CMD_PARAM} --eval 'rs.add("<%= mongo_current_ip %>:<%= mongo_DbTypeport %>")'
  [ $? -ne 0 ] && exit 1
  # need to wait for complete add before restarting
  _timeout=30
  add_ok="false"
  while [ "$add_ok" == "false" ]
  do
    add_ok=`${MONGO_CMD} --host <%= mongo_current_ip %>:<%= mongo_DbTypeport %> ${MONGO_CMD_PARAM} \
      --eval 'rs.isMaster().secondary'`
    if [ "$add_ok" != "true" ]
    then
      sleep 2
      _timeout=$((_timeout-2))
      [ ${_timeout} -le 0 ] && echo "node <%= mongo_current_ip %>:<%= mongo_DbTypeport %> hasn\'t been added. Timeout reached" && exit 1
    fi
  done

fi
}


##################################################################################
#################               Main                   ###########################
##################################################################################
sys_update

export MONGO_CMD_PARAM="--quiet"

<%- if  p("mongodb.node_role") == "sa" %>
# In standalone mode
start_bs
create_admin_users
<%- else -%>
# In replicaset mode  
start_replicaset
<%- end -%>

kill_and_wait $PIDFILE

exit 0
